// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notepad.proto

#include "notepad.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace notepad {
PROTOBUF_CONSTEXPR USER::USER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.location_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct USERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR USERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~USERDefaultTypeInternal() {}
  union {
    USER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 USERDefaultTypeInternal _USER_default_instance_;
PROTOBUF_CONSTEXPR USER_BOOK::USER_BOOK(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct USER_BOOKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR USER_BOOKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~USER_BOOKDefaultTypeInternal() {}
  union {
    USER_BOOK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 USER_BOOKDefaultTypeInternal _USER_BOOK_default_instance_;
PROTOBUF_CONSTEXPR GIST::GIST(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.previous_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.next_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.operation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gist_line_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.line_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GISTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GISTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GISTDefaultTypeInternal() {}
  union {
    GIST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GISTDefaultTypeInternal _GIST_default_instance_;
PROTOBUF_CONSTEXPR PROJECT::PROJECT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gist_)*/{}
  , /*decltype(_impl_.project_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.project_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.operations_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PROJECTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROJECTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROJECTDefaultTypeInternal() {}
  union {
    PROJECT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROJECTDefaultTypeInternal _PROJECT_default_instance_;
PROTOBUF_CONSTEXPR PROJECT_LIST::PROJECT_LIST(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.project_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PROJECT_LISTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROJECT_LISTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROJECT_LISTDefaultTypeInternal() {}
  union {
    PROJECT_LIST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROJECT_LISTDefaultTypeInternal _PROJECT_LIST_default_instance_;
PROTOBUF_CONSTEXPR VERSION_POINTER::VERSION_POINTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_no_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.project_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gist_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VERSION_POINTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VERSION_POINTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VERSION_POINTERDefaultTypeInternal() {}
  union {
    VERSION_POINTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VERSION_POINTERDefaultTypeInternal _VERSION_POINTER_default_instance_;
PROTOBUF_CONSTEXPR VERSION::VERSION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VERSIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VERSIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VERSIONDefaultTypeInternal() {}
  union {
    VERSION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VERSIONDefaultTypeInternal _VERSION_default_instance_;
}  // namespace notepad
static ::_pb::Metadata file_level_metadata_notepad_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_notepad_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_notepad_2eproto = nullptr;

const uint32_t TableStruct_notepad_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::notepad::USER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::notepad::USER, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::notepad::USER, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::notepad::USER, _impl_.email_),
  PROTOBUF_FIELD_OFFSET(::notepad::USER, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::notepad::USER, _impl_.location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::notepad::USER_BOOK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::notepad::USER_BOOK, _impl_.user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::notepad::GIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::notepad::GIST, _impl_.previous_),
  PROTOBUF_FIELD_OFFSET(::notepad::GIST, _impl_.next_),
  PROTOBUF_FIELD_OFFSET(::notepad::GIST, _impl_.operation_),
  PROTOBUF_FIELD_OFFSET(::notepad::GIST, _impl_.line_),
  PROTOBUF_FIELD_OFFSET(::notepad::GIST, _impl_.gist_line_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::notepad::PROJECT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::notepad::PROJECT, _impl_.project_id_),
  PROTOBUF_FIELD_OFFSET(::notepad::PROJECT, _impl_.project_name_),
  PROTOBUF_FIELD_OFFSET(::notepad::PROJECT, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::notepad::PROJECT, _impl_.operations_),
  PROTOBUF_FIELD_OFFSET(::notepad::PROJECT, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::notepad::PROJECT, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::notepad::PROJECT, _impl_.gist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::notepad::PROJECT_LIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::notepad::PROJECT_LIST, _impl_.project_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::notepad::VERSION_POINTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::notepad::VERSION_POINTER, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::notepad::VERSION_POINTER, _impl_.version_no_),
  PROTOBUF_FIELD_OFFSET(::notepad::VERSION_POINTER, _impl_.project_id_),
  PROTOBUF_FIELD_OFFSET(::notepad::VERSION_POINTER, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::notepad::VERSION_POINTER, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::notepad::VERSION_POINTER, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::notepad::VERSION_POINTER, _impl_.gist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::notepad::VERSION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::notepad::VERSION, _impl_.version_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::notepad::USER)},
  { 11, -1, -1, sizeof(::notepad::USER_BOOK)},
  { 18, -1, -1, sizeof(::notepad::GIST)},
  { 29, -1, -1, sizeof(::notepad::PROJECT)},
  { 42, -1, -1, sizeof(::notepad::PROJECT_LIST)},
  { 49, -1, -1, sizeof(::notepad::VERSION_POINTER)},
  { 62, -1, -1, sizeof(::notepad::VERSION)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::notepad::_USER_default_instance_._instance,
  &::notepad::_USER_BOOK_default_instance_._instance,
  &::notepad::_GIST_default_instance_._instance,
  &::notepad::_PROJECT_default_instance_._instance,
  &::notepad::_PROJECT_LIST_default_instance_._instance,
  &::notepad::_VERSION_POINTER_default_instance_._instance,
  &::notepad::_VERSION_default_instance_._instance,
};

const char descriptor_table_protodef_notepad_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rnotepad.proto\022\007notepad\"S\n\004USER\022\014\n\004name"
  "\030\001 \001(\t\022\n\n\002id\030\002 \001(\t\022\r\n\005email\030\003 \001(\t\022\020\n\010pas"
  "sword\030\004 \001(\t\022\020\n\010location\030\005 \001(\t\"(\n\tUSER_BO"
  "OK\022\033\n\004user\030\001 \003(\0132\r.notepad.USER\"Z\n\004GIST\022"
  "\020\n\010previous\030\001 \001(\t\022\014\n\004next\030\002 \001(\t\022\021\n\topera"
  "tion\030\003 \001(\t\022\014\n\004line\030\004 \001(\005\022\021\n\tgist_line\030\005 "
  "\001(\t\"\221\001\n\007PROJECT\022\022\n\nproject_id\030\001 \001(\t\022\024\n\014p"
  "roject_name\030\002 \001(\t\022\017\n\007user_id\030\003 \001(\t\022\022\n\nop"
  "erations\030\004 \001(\005\022\014\n\004path\030\005 \001(\t\022\014\n\004time\030\006 \001"
  "(\t\022\033\n\004gist\030\007 \003(\0132\r.notepad.GIST\"1\n\014PROJE"
  "CT_LIST\022!\n\007project\030\001 \003(\0132\020.notepad.PROJE"
  "CT\"~\n\017VERSION_POINTER\022\n\n\002id\030\001 \001(\t\022\022\n\nver"
  "sion_no\030\002 \001(\t\022\022\n\nproject_id\030\003 \001(\t\022\014\n\004pat"
  "h\030\004 \001(\t\022\r\n\005count\030\005 \001(\005\022\014\n\004time\030\006 \001(\t\022\014\n\004"
  "gist\030\007 \001(\t\"4\n\007VERSION\022)\n\007version\030\001 \003(\0132\030"
  ".notepad.VERSION_POINTERb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_notepad_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_notepad_2eproto = {
    false, false, 632, descriptor_table_protodef_notepad_2eproto,
    "notepad.proto",
    &descriptor_table_notepad_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_notepad_2eproto::offsets,
    file_level_metadata_notepad_2eproto, file_level_enum_descriptors_notepad_2eproto,
    file_level_service_descriptors_notepad_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_notepad_2eproto_getter() {
  return &descriptor_table_notepad_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_notepad_2eproto(&descriptor_table_notepad_2eproto);
namespace notepad {

// ===================================================================

class USER::_Internal {
 public:
};

USER::USER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:notepad.USER)
}
USER::USER(const USER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  USER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.email_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.location_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    _this->_impl_.location_.Set(from._internal_location(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:notepad.USER)
}

inline void USER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.email_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.location_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

USER::~USER() {
  // @@protoc_insertion_point(destructor:notepad.USER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void USER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.id_.Destroy();
  _impl_.email_.Destroy();
  _impl_.password_.Destroy();
  _impl_.location_.Destroy();
}

void USER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void USER::Clear() {
// @@protoc_insertion_point(message_clear_start:notepad.USER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  _impl_.email_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _impl_.location_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "notepad.USER.name"));
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "notepad.USER.id"));
        } else
          goto handle_unusual;
        continue;
      // string email = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "notepad.USER.email"));
        } else
          goto handle_unusual;
        continue;
      // string password = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "notepad.USER.password"));
        } else
          goto handle_unusual;
        continue;
      // string location = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "notepad.USER.location"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* USER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:notepad.USER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "notepad.USER.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "notepad.USER.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // string email = 3;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "notepad.USER.email");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_email(), target);
  }

  // string password = 4;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "notepad.USER.password");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_password(), target);
  }

  // string location = 5;
  if (!this->_internal_location().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "notepad.USER.location");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:notepad.USER)
  return target;
}

size_t USER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:notepad.USER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string email = 3;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string password = 4;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string location = 5;
  if (!this->_internal_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData USER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    USER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*USER::GetClassData() const { return &_class_data_; }


void USER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<USER*>(&to_msg);
  auto& from = static_cast<const USER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:notepad.USER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (!from._internal_location().empty()) {
    _this->_internal_set_location(from._internal_location());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void USER::CopyFrom(const USER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:notepad.USER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USER::IsInitialized() const {
  return true;
}

void USER::InternalSwap(USER* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.location_, lhs_arena,
      &other->_impl_.location_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata USER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_notepad_2eproto_getter, &descriptor_table_notepad_2eproto_once,
      file_level_metadata_notepad_2eproto[0]);
}

// ===================================================================

class USER_BOOK::_Internal {
 public:
};

USER_BOOK::USER_BOOK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:notepad.USER_BOOK)
}
USER_BOOK::USER_BOOK(const USER_BOOK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  USER_BOOK* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){from._impl_.user_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:notepad.USER_BOOK)
}

inline void USER_BOOK::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

USER_BOOK::~USER_BOOK() {
  // @@protoc_insertion_point(destructor:notepad.USER_BOOK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void USER_BOOK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_.~RepeatedPtrField();
}

void USER_BOOK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void USER_BOOK::Clear() {
// @@protoc_insertion_point(message_clear_start:notepad.USER_BOOK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USER_BOOK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .notepad.USER user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* USER_BOOK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:notepad.USER_BOOK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .notepad.USER user = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_user_size()); i < n; i++) {
    const auto& repfield = this->_internal_user(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:notepad.USER_BOOK)
  return target;
}

size_t USER_BOOK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:notepad.USER_BOOK)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .notepad.USER user = 1;
  total_size += 1UL * this->_internal_user_size();
  for (const auto& msg : this->_impl_.user_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData USER_BOOK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    USER_BOOK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*USER_BOOK::GetClassData() const { return &_class_data_; }


void USER_BOOK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<USER_BOOK*>(&to_msg);
  auto& from = static_cast<const USER_BOOK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:notepad.USER_BOOK)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.user_.MergeFrom(from._impl_.user_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void USER_BOOK::CopyFrom(const USER_BOOK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:notepad.USER_BOOK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USER_BOOK::IsInitialized() const {
  return true;
}

void USER_BOOK::InternalSwap(USER_BOOK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.user_.InternalSwap(&other->_impl_.user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata USER_BOOK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_notepad_2eproto_getter, &descriptor_table_notepad_2eproto_once,
      file_level_metadata_notepad_2eproto[1]);
}

// ===================================================================

class GIST::_Internal {
 public:
};

GIST::GIST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:notepad.GIST)
}
GIST::GIST(const GIST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GIST* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.previous_){}
    , decltype(_impl_.next_){}
    , decltype(_impl_.operation_){}
    , decltype(_impl_.gist_line_){}
    , decltype(_impl_.line_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.previous_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.previous_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_previous().empty()) {
    _this->_impl_.previous_.Set(from._internal_previous(), 
      _this->GetArenaForAllocation());
  }
  _impl_.next_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next().empty()) {
    _this->_impl_.next_.Set(from._internal_next(), 
      _this->GetArenaForAllocation());
  }
  _impl_.operation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operation().empty()) {
    _this->_impl_.operation_.Set(from._internal_operation(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gist_line_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gist_line_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gist_line().empty()) {
    _this->_impl_.gist_line_.Set(from._internal_gist_line(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.line_ = from._impl_.line_;
  // @@protoc_insertion_point(copy_constructor:notepad.GIST)
}

inline void GIST::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.previous_){}
    , decltype(_impl_.next_){}
    , decltype(_impl_.operation_){}
    , decltype(_impl_.gist_line_){}
    , decltype(_impl_.line_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.previous_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.previous_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.next_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.operation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gist_line_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gist_line_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GIST::~GIST() {
  // @@protoc_insertion_point(destructor:notepad.GIST)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GIST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.previous_.Destroy();
  _impl_.next_.Destroy();
  _impl_.operation_.Destroy();
  _impl_.gist_line_.Destroy();
}

void GIST::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GIST::Clear() {
// @@protoc_insertion_point(message_clear_start:notepad.GIST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.previous_.ClearToEmpty();
  _impl_.next_.ClearToEmpty();
  _impl_.operation_.ClearToEmpty();
  _impl_.gist_line_.ClearToEmpty();
  _impl_.line_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GIST::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string previous = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_previous();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "notepad.GIST.previous"));
        } else
          goto handle_unusual;
        continue;
      // string next = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_next();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "notepad.GIST.next"));
        } else
          goto handle_unusual;
        continue;
      // string operation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_operation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "notepad.GIST.operation"));
        } else
          goto handle_unusual;
        continue;
      // int32 line = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string gist_line = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_gist_line();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "notepad.GIST.gist_line"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GIST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:notepad.GIST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string previous = 1;
  if (!this->_internal_previous().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_previous().data(), static_cast<int>(this->_internal_previous().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "notepad.GIST.previous");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_previous(), target);
  }

  // string next = 2;
  if (!this->_internal_next().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next().data(), static_cast<int>(this->_internal_next().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "notepad.GIST.next");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next(), target);
  }

  // string operation = 3;
  if (!this->_internal_operation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operation().data(), static_cast<int>(this->_internal_operation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "notepad.GIST.operation");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_operation(), target);
  }

  // int32 line = 4;
  if (this->_internal_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_line(), target);
  }

  // string gist_line = 5;
  if (!this->_internal_gist_line().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gist_line().data(), static_cast<int>(this->_internal_gist_line().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "notepad.GIST.gist_line");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_gist_line(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:notepad.GIST)
  return target;
}

size_t GIST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:notepad.GIST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string previous = 1;
  if (!this->_internal_previous().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_previous());
  }

  // string next = 2;
  if (!this->_internal_next().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next());
  }

  // string operation = 3;
  if (!this->_internal_operation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operation());
  }

  // string gist_line = 5;
  if (!this->_internal_gist_line().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gist_line());
  }

  // int32 line = 4;
  if (this->_internal_line() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_line());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GIST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GIST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GIST::GetClassData() const { return &_class_data_; }


void GIST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GIST*>(&to_msg);
  auto& from = static_cast<const GIST&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:notepad.GIST)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_previous().empty()) {
    _this->_internal_set_previous(from._internal_previous());
  }
  if (!from._internal_next().empty()) {
    _this->_internal_set_next(from._internal_next());
  }
  if (!from._internal_operation().empty()) {
    _this->_internal_set_operation(from._internal_operation());
  }
  if (!from._internal_gist_line().empty()) {
    _this->_internal_set_gist_line(from._internal_gist_line());
  }
  if (from._internal_line() != 0) {
    _this->_internal_set_line(from._internal_line());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GIST::CopyFrom(const GIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:notepad.GIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GIST::IsInitialized() const {
  return true;
}

void GIST::InternalSwap(GIST* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.previous_, lhs_arena,
      &other->_impl_.previous_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.next_, lhs_arena,
      &other->_impl_.next_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.operation_, lhs_arena,
      &other->_impl_.operation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gist_line_, lhs_arena,
      &other->_impl_.gist_line_, rhs_arena
  );
  swap(_impl_.line_, other->_impl_.line_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GIST::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_notepad_2eproto_getter, &descriptor_table_notepad_2eproto_once,
      file_level_metadata_notepad_2eproto[2]);
}

// ===================================================================

class PROJECT::_Internal {
 public:
};

PROJECT::PROJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:notepad.PROJECT)
}
PROJECT::PROJECT(const PROJECT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROJECT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gist_){from._impl_.gist_}
    , decltype(_impl_.project_id_){}
    , decltype(_impl_.project_name_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.operations_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.project_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.project_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_project_id().empty()) {
    _this->_impl_.project_id_.Set(from._internal_project_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.project_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.project_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_project_name().empty()) {
    _this->_impl_.project_name_.Set(from._internal_project_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_time().empty()) {
    _this->_impl_.time_.Set(from._internal_time(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.operations_ = from._impl_.operations_;
  // @@protoc_insertion_point(copy_constructor:notepad.PROJECT)
}

inline void PROJECT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gist_){arena}
    , decltype(_impl_.project_id_){}
    , decltype(_impl_.project_name_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.operations_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.project_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.project_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.project_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.project_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROJECT::~PROJECT() {
  // @@protoc_insertion_point(destructor:notepad.PROJECT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROJECT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gist_.~RepeatedPtrField();
  _impl_.project_id_.Destroy();
  _impl_.project_name_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.path_.Destroy();
  _impl_.time_.Destroy();
}

void PROJECT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROJECT::Clear() {
// @@protoc_insertion_point(message_clear_start:notepad.PROJECT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gist_.Clear();
  _impl_.project_id_.ClearToEmpty();
  _impl_.project_name_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.path_.ClearToEmpty();
  _impl_.time_.ClearToEmpty();
  _impl_.operations_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROJECT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string project_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_project_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "notepad.PROJECT.project_id"));
        } else
          goto handle_unusual;
        continue;
      // string project_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_project_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "notepad.PROJECT.project_name"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "notepad.PROJECT.user_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 operations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.operations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "notepad.PROJECT.path"));
        } else
          goto handle_unusual;
        continue;
      // string time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "notepad.PROJECT.time"));
        } else
          goto handle_unusual;
        continue;
      // repeated .notepad.GIST gist = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROJECT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:notepad.PROJECT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (!this->_internal_project_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project_id().data(), static_cast<int>(this->_internal_project_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "notepad.PROJECT.project_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_project_id(), target);
  }

  // string project_name = 2;
  if (!this->_internal_project_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project_name().data(), static_cast<int>(this->_internal_project_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "notepad.PROJECT.project_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_project_name(), target);
  }

  // string user_id = 3;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "notepad.PROJECT.user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_id(), target);
  }

  // int32 operations = 4;
  if (this->_internal_operations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_operations(), target);
  }

  // string path = 5;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "notepad.PROJECT.path");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_path(), target);
  }

  // string time = 6;
  if (!this->_internal_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "notepad.PROJECT.time");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_time(), target);
  }

  // repeated .notepad.GIST gist = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gist_size()); i < n; i++) {
    const auto& repfield = this->_internal_gist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:notepad.PROJECT)
  return target;
}

size_t PROJECT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:notepad.PROJECT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .notepad.GIST gist = 7;
  total_size += 1UL * this->_internal_gist_size();
  for (const auto& msg : this->_impl_.gist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string project_id = 1;
  if (!this->_internal_project_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project_id());
  }

  // string project_name = 2;
  if (!this->_internal_project_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project_name());
  }

  // string user_id = 3;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string path = 5;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string time = 6;
  if (!this->_internal_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time());
  }

  // int32 operations = 4;
  if (this->_internal_operations() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_operations());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROJECT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROJECT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROJECT::GetClassData() const { return &_class_data_; }


void PROJECT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROJECT*>(&to_msg);
  auto& from = static_cast<const PROJECT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:notepad.PROJECT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.gist_.MergeFrom(from._impl_.gist_);
  if (!from._internal_project_id().empty()) {
    _this->_internal_set_project_id(from._internal_project_id());
  }
  if (!from._internal_project_name().empty()) {
    _this->_internal_set_project_name(from._internal_project_name());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (!from._internal_time().empty()) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_operations() != 0) {
    _this->_internal_set_operations(from._internal_operations());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROJECT::CopyFrom(const PROJECT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:notepad.PROJECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROJECT::IsInitialized() const {
  return true;
}

void PROJECT::InternalSwap(PROJECT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.gist_.InternalSwap(&other->_impl_.gist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.project_id_, lhs_arena,
      &other->_impl_.project_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.project_name_, lhs_arena,
      &other->_impl_.project_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.time_, lhs_arena,
      &other->_impl_.time_, rhs_arena
  );
  swap(_impl_.operations_, other->_impl_.operations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROJECT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_notepad_2eproto_getter, &descriptor_table_notepad_2eproto_once,
      file_level_metadata_notepad_2eproto[3]);
}

// ===================================================================

class PROJECT_LIST::_Internal {
 public:
};

PROJECT_LIST::PROJECT_LIST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:notepad.PROJECT_LIST)
}
PROJECT_LIST::PROJECT_LIST(const PROJECT_LIST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROJECT_LIST* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.project_){from._impl_.project_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:notepad.PROJECT_LIST)
}

inline void PROJECT_LIST::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.project_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PROJECT_LIST::~PROJECT_LIST() {
  // @@protoc_insertion_point(destructor:notepad.PROJECT_LIST)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROJECT_LIST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.project_.~RepeatedPtrField();
}

void PROJECT_LIST::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROJECT_LIST::Clear() {
// @@protoc_insertion_point(message_clear_start:notepad.PROJECT_LIST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.project_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROJECT_LIST::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .notepad.PROJECT project = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_project(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROJECT_LIST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:notepad.PROJECT_LIST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .notepad.PROJECT project = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_project_size()); i < n; i++) {
    const auto& repfield = this->_internal_project(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:notepad.PROJECT_LIST)
  return target;
}

size_t PROJECT_LIST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:notepad.PROJECT_LIST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .notepad.PROJECT project = 1;
  total_size += 1UL * this->_internal_project_size();
  for (const auto& msg : this->_impl_.project_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROJECT_LIST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROJECT_LIST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROJECT_LIST::GetClassData() const { return &_class_data_; }


void PROJECT_LIST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROJECT_LIST*>(&to_msg);
  auto& from = static_cast<const PROJECT_LIST&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:notepad.PROJECT_LIST)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.project_.MergeFrom(from._impl_.project_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROJECT_LIST::CopyFrom(const PROJECT_LIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:notepad.PROJECT_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROJECT_LIST::IsInitialized() const {
  return true;
}

void PROJECT_LIST::InternalSwap(PROJECT_LIST* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.project_.InternalSwap(&other->_impl_.project_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROJECT_LIST::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_notepad_2eproto_getter, &descriptor_table_notepad_2eproto_once,
      file_level_metadata_notepad_2eproto[4]);
}

// ===================================================================

class VERSION_POINTER::_Internal {
 public:
};

VERSION_POINTER::VERSION_POINTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:notepad.VERSION_POINTER)
}
VERSION_POINTER::VERSION_POINTER(const VERSION_POINTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VERSION_POINTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.version_no_){}
    , decltype(_impl_.project_id_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.gist_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_no_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_no_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_no().empty()) {
    _this->_impl_.version_no_.Set(from._internal_version_no(), 
      _this->GetArenaForAllocation());
  }
  _impl_.project_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.project_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_project_id().empty()) {
    _this->_impl_.project_id_.Set(from._internal_project_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_time().empty()) {
    _this->_impl_.time_.Set(from._internal_time(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gist_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gist_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gist().empty()) {
    _this->_impl_.gist_.Set(from._internal_gist(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:notepad.VERSION_POINTER)
}

inline void VERSION_POINTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.version_no_){}
    , decltype(_impl_.project_id_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.gist_){}
    , decltype(_impl_.count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_no_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_no_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.project_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.project_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gist_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gist_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VERSION_POINTER::~VERSION_POINTER() {
  // @@protoc_insertion_point(destructor:notepad.VERSION_POINTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VERSION_POINTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.version_no_.Destroy();
  _impl_.project_id_.Destroy();
  _impl_.path_.Destroy();
  _impl_.time_.Destroy();
  _impl_.gist_.Destroy();
}

void VERSION_POINTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VERSION_POINTER::Clear() {
// @@protoc_insertion_point(message_clear_start:notepad.VERSION_POINTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.version_no_.ClearToEmpty();
  _impl_.project_id_.ClearToEmpty();
  _impl_.path_.ClearToEmpty();
  _impl_.time_.ClearToEmpty();
  _impl_.gist_.ClearToEmpty();
  _impl_.count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VERSION_POINTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "notepad.VERSION_POINTER.id"));
        } else
          goto handle_unusual;
        continue;
      // string version_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version_no();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "notepad.VERSION_POINTER.version_no"));
        } else
          goto handle_unusual;
        continue;
      // string project_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_project_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "notepad.VERSION_POINTER.project_id"));
        } else
          goto handle_unusual;
        continue;
      // string path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "notepad.VERSION_POINTER.path"));
        } else
          goto handle_unusual;
        continue;
      // int32 count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "notepad.VERSION_POINTER.time"));
        } else
          goto handle_unusual;
        continue;
      // string gist = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_gist();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "notepad.VERSION_POINTER.gist"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VERSION_POINTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:notepad.VERSION_POINTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "notepad.VERSION_POINTER.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string version_no = 2;
  if (!this->_internal_version_no().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_no().data(), static_cast<int>(this->_internal_version_no().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "notepad.VERSION_POINTER.version_no");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version_no(), target);
  }

  // string project_id = 3;
  if (!this->_internal_project_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project_id().data(), static_cast<int>(this->_internal_project_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "notepad.VERSION_POINTER.project_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_project_id(), target);
  }

  // string path = 4;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "notepad.VERSION_POINTER.path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_path(), target);
  }

  // int32 count = 5;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_count(), target);
  }

  // string time = 6;
  if (!this->_internal_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "notepad.VERSION_POINTER.time");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_time(), target);
  }

  // string gist = 7;
  if (!this->_internal_gist().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gist().data(), static_cast<int>(this->_internal_gist().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "notepad.VERSION_POINTER.gist");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_gist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:notepad.VERSION_POINTER)
  return target;
}

size_t VERSION_POINTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:notepad.VERSION_POINTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string version_no = 2;
  if (!this->_internal_version_no().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_no());
  }

  // string project_id = 3;
  if (!this->_internal_project_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project_id());
  }

  // string path = 4;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string time = 6;
  if (!this->_internal_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time());
  }

  // string gist = 7;
  if (!this->_internal_gist().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gist());
  }

  // int32 count = 5;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VERSION_POINTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VERSION_POINTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VERSION_POINTER::GetClassData() const { return &_class_data_; }


void VERSION_POINTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VERSION_POINTER*>(&to_msg);
  auto& from = static_cast<const VERSION_POINTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:notepad.VERSION_POINTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_version_no().empty()) {
    _this->_internal_set_version_no(from._internal_version_no());
  }
  if (!from._internal_project_id().empty()) {
    _this->_internal_set_project_id(from._internal_project_id());
  }
  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (!from._internal_time().empty()) {
    _this->_internal_set_time(from._internal_time());
  }
  if (!from._internal_gist().empty()) {
    _this->_internal_set_gist(from._internal_gist());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VERSION_POINTER::CopyFrom(const VERSION_POINTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:notepad.VERSION_POINTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VERSION_POINTER::IsInitialized() const {
  return true;
}

void VERSION_POINTER::InternalSwap(VERSION_POINTER* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_no_, lhs_arena,
      &other->_impl_.version_no_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.project_id_, lhs_arena,
      &other->_impl_.project_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.time_, lhs_arena,
      &other->_impl_.time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gist_, lhs_arena,
      &other->_impl_.gist_, rhs_arena
  );
  swap(_impl_.count_, other->_impl_.count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VERSION_POINTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_notepad_2eproto_getter, &descriptor_table_notepad_2eproto_once,
      file_level_metadata_notepad_2eproto[5]);
}

// ===================================================================

class VERSION::_Internal {
 public:
};

VERSION::VERSION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:notepad.VERSION)
}
VERSION::VERSION(const VERSION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VERSION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){from._impl_.version_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:notepad.VERSION)
}

inline void VERSION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VERSION::~VERSION() {
  // @@protoc_insertion_point(destructor:notepad.VERSION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VERSION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.~RepeatedPtrField();
}

void VERSION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VERSION::Clear() {
// @@protoc_insertion_point(message_clear_start:notepad.VERSION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VERSION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .notepad.VERSION_POINTER version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_version(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VERSION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:notepad.VERSION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .notepad.VERSION_POINTER version = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_version_size()); i < n; i++) {
    const auto& repfield = this->_internal_version(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:notepad.VERSION)
  return target;
}

size_t VERSION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:notepad.VERSION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .notepad.VERSION_POINTER version = 1;
  total_size += 1UL * this->_internal_version_size();
  for (const auto& msg : this->_impl_.version_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VERSION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VERSION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VERSION::GetClassData() const { return &_class_data_; }


void VERSION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VERSION*>(&to_msg);
  auto& from = static_cast<const VERSION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:notepad.VERSION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.version_.MergeFrom(from._impl_.version_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VERSION::CopyFrom(const VERSION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:notepad.VERSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VERSION::IsInitialized() const {
  return true;
}

void VERSION::InternalSwap(VERSION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.version_.InternalSwap(&other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VERSION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_notepad_2eproto_getter, &descriptor_table_notepad_2eproto_once,
      file_level_metadata_notepad_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace notepad
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::notepad::USER*
Arena::CreateMaybeMessage< ::notepad::USER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::notepad::USER >(arena);
}
template<> PROTOBUF_NOINLINE ::notepad::USER_BOOK*
Arena::CreateMaybeMessage< ::notepad::USER_BOOK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::notepad::USER_BOOK >(arena);
}
template<> PROTOBUF_NOINLINE ::notepad::GIST*
Arena::CreateMaybeMessage< ::notepad::GIST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::notepad::GIST >(arena);
}
template<> PROTOBUF_NOINLINE ::notepad::PROJECT*
Arena::CreateMaybeMessage< ::notepad::PROJECT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::notepad::PROJECT >(arena);
}
template<> PROTOBUF_NOINLINE ::notepad::PROJECT_LIST*
Arena::CreateMaybeMessage< ::notepad::PROJECT_LIST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::notepad::PROJECT_LIST >(arena);
}
template<> PROTOBUF_NOINLINE ::notepad::VERSION_POINTER*
Arena::CreateMaybeMessage< ::notepad::VERSION_POINTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::notepad::VERSION_POINTER >(arena);
}
template<> PROTOBUF_NOINLINE ::notepad::VERSION*
Arena::CreateMaybeMessage< ::notepad::VERSION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::notepad::VERSION >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
